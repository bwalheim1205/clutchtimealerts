name: Publish Docker and Pypi image on release

on:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  RELEASE_VERSION: ${{ github.event.release.tag_name }}

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: bwalheim1205/clutchtimealerts

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}, ${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  publish_to_pypi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PDM
        run: |
          python -m pip install --upgrade pip
          pip install --user pdm

      - name: Verify version in pyproject.toml matches release version
        id: verify_version
        run: |
          RELEASE_VERSION=${{ github.event.release.tag_name }}
          PYPROJECT_VERSION=v$(grep '^version =' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Release version: $RELEASE_VERSION"
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          if [ "$RELEASE_VERSION" != "$PYPROJECT_VERSION" ]; then
            echo "Version mismatch! pyproject.toml version ($PYPROJECT_VERSION) does not match release version ($RELEASE_VERSION)."
            exit 1
          fi

      - name: Build and publish package
        env:
          PDM_PYPI_USERNAME: __token__
          PDM_PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "PYPI_PASSWORD=$PDM_PYPI_PASSWORD"
          pdm build
          pdm publish --repository pypi
